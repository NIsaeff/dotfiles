# ================================
# TMUX CONFIGURATION
# ================================

# Set default shell
set-option -g default-shell /bin/zsh

# ================================
# VIM KEYBINDS
# ================================

# Set prefix to Ctrl-a (more vim-like than Ctrl-b)
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# Vim-style pane navigation with Ctrl+hjkl (smart vim-tmux navigation)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
is_opencode="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?opencode$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'if-shell "$is_opencode" "select-pane -L" "select-pane -L"'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'if-shell "$is_opencode" "select-pane -D" "select-pane -D"'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'if-shell "$is_opencode" "select-pane -U" "select-pane -U"'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'if-shell "$is_opencode" "select-pane -R" "select-pane -R"'

# Pane resizing with Ctrl+arrow keys
bind -n C-Left resize-pane -L 5
bind -n C-Down resize-pane -D 5
bind -n C-Up resize-pane -U 5
bind -n C-Right resize-pane -R 5

# Window navigation (Alt instead of Ctrl to avoid conflicts)
bind -n M-h select-window -t :-
bind -n M-l select-window -t :+

# Vim-style copy mode
setw -g mode-keys vi
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "xclip -in -selection clipboard"
bind-key -T copy-mode-vi 'r' send -X rectangle-toggle

# Enter copy mode with Escape (vim-like)
bind Escape copy-mode

# ================================
# MASTER PANE SYSTEM (DISABLED)
# ================================
# 
# NOTE: Master pane system temporarily disabled for reconfiguration
# Uncomment and modify sections below when ready to re-enable
#
# # Set master pane (top-right by default, pane 1 in typical layout)
# set-environment -g TMUX_MASTER_PANE_ID ""
# 
# # Function to identify top-right pane automatically
# set-environment -g TMUX_GET_TOP_RIGHT_PANE '
#     tmux list-panes -F "#{pane_id} #{pane_left} #{pane_top}" | \
#     awk "BEGIN{max_left=0; min_top=999; target=\"\"} 
#          {if(\$3<=min_top && \$2>=max_left) {min_top=\$3; max_left=\$2; target=\$1}} 
#          END{print target}"'
# 
# # Function to sync all panes to master pane directory
# set-environment -g TMUX_SYNC_ALL_TO_MASTER '
#     master_pane=$(tmux show-environment TMUX_MASTER_PANE_ID 2>/dev/null | cut -d= -f2);
#     if [ -z "$master_pane" ]; then
#         master_pane=$(eval $TMUX_GET_TOP_RIGHT_PANE);
#         tmux set-environment TMUX_MASTER_PANE_ID "$master_pane";
#     fi;
#     if [ -n "$master_pane" ] && tmux list-panes -F "#{pane_id}" | grep -q "$master_pane"; then
#         master_dir=$(tmux display-message -t "$master_pane" -p "#{pane_current_path}");
#         for pane in $(tmux list-panes -F "#{pane_id}"); do
#             if [ "$pane" != "$master_pane" ]; then
#                 current_dir=$(tmux display-message -t "$pane" -p "#{pane_current_path}");
#                 if [ "$current_dir" != "$master_dir" ]; then
#                     tmux send-keys -t "$pane" "cd \"$master_dir\"" C-m;
#                 fi;
#             fi;
#         done;
#     fi'
# 
# # Function to set current pane as master
# bind M run-shell 'tmux set-environment TMUX_MASTER_PANE_ID "#{pane_id}"' \; display-message "Master pane set to #{pane_id}"
# 
# # Function to sync to master pane (directory and virtual environment)
# bind-key -n C-y run-shell '
#     master_pane=$(tmux show-environment TMUX_MASTER_PANE_ID 2>/dev/null | cut -d= -f2);
#     if [ -n "$master_pane" ] && tmux list-panes -F "#{pane_id}" | grep -q "$master_pane"; then
#         current_dir=$(tmux display-message -p "#{pane_current_path}");
#         venv_path="";
#         if [ -n "$VIRTUAL_ENV" ]; then
#             venv_path="$VIRTUAL_ENV";
#         elif [ -n "$CONDA_DEFAULT_ENV" ]; then
#             venv_path="conda:$CONDA_DEFAULT_ENV";
#         fi;
#         if [ -n "$venv_path" ]; then
#             if [[ "$venv_path" == conda:* ]]; then
#                 env_name=$(echo "$venv_path" | cut -d: -f2);
#                 tmux send-keys -t "$master_pane" "conda activate $env_name" C-m;
#             else
#                 tmux send-keys -t "$master_pane" "source $venv_path/bin/activate" C-m;
#             fi;
#         fi;
#         tmux send-keys -t "$master_pane" "cd \"$current_dir\"" C-m;
#     else
#         tmux display-message "No valid master pane set. Use prefix+M to set master pane.";
#     fi'
# 
# # Auto-set master pane in development layouts (run after creating layout)
# bind-key D run-shell '
#     master_pane=$(eval $TMUX_GET_TOP_RIGHT_PANE);
#     if [ -n "$master_pane" ]; then
#         tmux set-environment TMUX_MASTER_PANE_ID "$master_pane";
#         tmux display-message "Auto-set master pane to $master_pane (top-right)";
#     fi'
# 
# # Directory change detection: only sync when master pane directory actually changes
# # Store last known master directory to detect changes
# set-environment -g TMUX_LAST_MASTER_DIR ""
# 
# # Function to check and sync only on directory changes
# set-environment -g TMUX_CHECK_DIR_CHANGE '
#     master_pane=$(tmux show-environment TMUX_MASTER_PANE_ID 2>/dev/null | cut -d= -f2);
#     if [ -z "$master_pane" ]; then
#         master_pane=$(eval $TMUX_GET_TOP_RIGHT_PANE);
#         tmux set-environment TMUX_MASTER_PANE_ID "$master_pane";
#     fi;
#     if [ -n "$master_pane" ] && tmux list-panes -F "#{pane_id}" | grep -q "$master_pane"; then
#         current_master_dir=$(tmux display-message -t "$master_pane" -p "#{pane_current_path}");
#         last_master_dir=$(tmux show-environment TMUX_LAST_MASTER_DIR 2>/dev/null | cut -d= -f2);
#         if [ "$current_master_dir" != "$last_master_dir" ]; then
#             tmux set-environment TMUX_LAST_MASTER_DIR "$current_master_dir";
#             eval $TMUX_SYNC_ALL_TO_MASTER;
#         fi;
#     fi'
# 
# # Hook that runs periodically to check for directory changes (not on pane selection)
# set-hook -g client-resized 'run-shell "eval \$TMUX_CHECK_DIR_CHANGE"'
# 
# # Manual sync command
# bind-key S run-shell 'eval $TMUX_SYNC_ALL_TO_MASTER' \; display-message "All panes synced to master directory"
# 
# # Periodic directory change detection (lightweight checks)
# set-hook -g client-session-changed 'run-shell "eval \$TMUX_CHECK_DIR_CHANGE"'
# set-hook -g session-window-changed 'run-shell "eval \$TMUX_CHECK_DIR_CHANGE"'
# 
# # Optional: Add a keybind to manually trigger directory change check
# bind-key C run-shell 'eval $TMUX_CHECK_DIR_CHANGE' \; display-message "Directory change check completed"

# ================================
# PANE MANAGEMENT & SYNCHRONIZATION
# ================================

# Split panes with vim-style keys and maintain current directory
bind s split-window -v -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"

# Manual sync toggle with visual feedback
bind-key y setw synchronize-panes \; display-message "Sync panes: #{?synchronize-panes,ON,OFF}"

# Quick pane layouts (standard)
bind M-1 select-layout even-horizontal
bind M-2 select-layout even-vertical  
bind M-3 select-layout main-horizontal
bind M-4 select-layout main-vertical
bind M-5 select-layout tiled

# Auto-sync layouts for development workflows
# These layouts automatically enable pane synchronization

# Development layout 1: Even horizontal with auto-sync (good for testing across environments)
bind M-6 select-layout even-horizontal \; setw synchronize-panes on \; display-message "Dev Layout: Even Horizontal + Sync ON"

# Development layout 2: Even vertical with auto-sync (good for log monitoring)
bind M-7 select-layout even-vertical \; setw synchronize-panes on \; display-message "Dev Layout: Even Vertical + Sync ON"

# Development layout 3: Tiled with auto-sync (good for multi-server commands)
bind M-8 select-layout tiled \; setw synchronize-panes on \; display-message "Dev Layout: Tiled + Sync ON"

# Quick multi-pane setup with auto-sync
# Creates 4 panes in tiled layout with sync enabled
bind M-9 split-window -h -c "#{pane_current_path}" \; split-window -v -c "#{pane_current_path}" \; select-pane -t 0 \; split-window -v -c "#{pane_current_path}" \; select-layout tiled \; setw synchronize-panes on \; display-message "4-Pane Dev Setup + Sync ON"

# Disable sync and return to normal layout
bind M-0 setw synchronize-panes off \; select-layout main-vertical \; display-message "Sync OFF - Normal Layout"

# ================================
# ESSENTIAL SETTINGS
# ================================

# Enable mouse support
set -g mouse on

# Increase scrollback buffer size
set -g history-limit 10000

# Fix colors and enable true color support with transparency
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",alacritty:Tc"

# Faster command sequences (no delay for escape)
set -s escape-time 0

# Increase repeat timeout for resize commands
set -g repeat-time 1000

# Start window and pane indexing at 1 instead of 0
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows when one is closed
set -g renumber-windows on

# Enable focus events for vim integration
set -g focus-events on

# ================================
# STATUS BAR
# ================================

# Update status bar every second
set -g status-interval 1

# Status bar position
set -g status-position bottom

# Status bar colors (matching your Catppuccin theme)
set -g status-bg "#1e1e2e"
set -g status-fg "#cdd6f4"

# Window status colors
setw -g window-status-current-style "fg=#1e1e2e,bg=#89b4fa,bold"
setw -g window-status-style "fg=#6c7086"

# Pane border colors
set -g pane-border-style "fg=#45475a"
set -g pane-active-border-style "fg=#89b4fa"

# Status bar content
set -g status-left "#[fg=#89b4fa,bold][#{session_name}]#{?synchronize-panes, #[fg=#f38ba8]SYNC,} "
set -g status-left-length 30

set -g status-right "#[fg=#f9e2af]%Y-%m-%d %H:%M:%S #[fg=#89b4fa,bold][#{host}]"
set -g status-right-length 50

# Window status format
setw -g window-status-format " #{window_index}:#{window_name} "
setw -g window-status-current-format " #{window_index}:#{window_name} "

# ================================
# KEY BINDINGS
# ================================

# Reload config file
bind r source-file ~/.tmux.conf \; display-message "Config reloaded!"

# Fallback pane navigation (prefix + hjkl) if Ctrl+hjkl doesn't work
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Kill pane/window without confirmation
bind x kill-pane
bind X kill-window

# New window with name prompt
bind-key c command-prompt -p "Name of new window: " "new-window -n '%%'"

# ================================
# PLUGINS (if using tpm in future)
# ================================

# Placeholder for plugin manager setup
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'
